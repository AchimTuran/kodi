#pragma once
/*
 *      Copyright (C) 2010-2015 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

/**
 * Bit options to pass to IAE::MakeStream
 */
enum AEStreamOptions
{
  AESTREAM_FORCE_RESAMPLE = 1 << 0,   /* force resample even if rates match */
  AESTREAM_PAUSED         = 1 << 1,   /* create the stream paused */
  AESTREAM_AUTOSTART      = 1 << 2,   /* autostart the stream when enough data is buffered */
  AESTREAM_BYPASS_ADSP    = 1 << 3    /* if this option is set the ADSP-System is bypassed and the raw stream will be passed through IAESink */
};

typedef enum
{
  AE_MATRIX_ENCODING_INVALID = -1,
  
  AE_MATRIX_ENCODING_NONE = 0,
  AE_MATRIX_ENCODING_DOLBY,
  AE_MATRIX_ENCODING_DPLII,
  AE_MATRIX_ENCODING_DPLIIX,
  AE_MATRIX_ENCODING_DPLIIZ,
  AE_MATRIX_ENCODING_DOLBYEX,
  AE_MATRIX_ENCODING_DOLBYHEADPHONE,
  
  AE_MATRIX_ENCODING_MAX
} AEMatrixEncoding;

typedef enum
{
  AE_AUDIO_SERVICE_INVALID = -1,
  
  AE_AUDIO_SERVICE_TYPE_MAIN = 0,
  AE_AUDIO_SERVICE_TYPE_EFFECTS,
  AE_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED,
  AE_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED,
  AE_AUDIO_SERVICE_TYPE_DIALOGUE,
  AE_AUDIO_SERVICE_TYPE_COMMENTARY,
  AE_AUDIO_SERVICE_TYPE_EMERGENCY,
  AE_AUDIO_SERVICE_TYPE_VOICE_OVER,
  AE_AUDIO_SERVICE_TYPE_KARAOKE,
  
  AE_AUDIO_SERVICE_MAX
}AEAudioServiceType;

typedef enum
{
  AE_STREAM_INVALID = -1,

  AE_STREAM_MUSIC,
  AE_STREAM_MOVIE,
  AE_STREAM_GAME,
  AE_STREAM_APP,
  AE_STREAM_PHONE,
  AE_STREAM_MESSAGE,
  AE_STREAM_TV,
  
  AE_STREAM_MAX
} AEStreamType;

typedef enum
{
  AE_SOURCE_FORMAT_UNKNOWN = -1,

  AE_SOURCE_FORMAT_STEREO = 0,
  AE_SOURCE_FORMAT_MONO,
  AE_SOURCE_FORMAT_MULTICHANNEL,
  AE_SOURCE_FORMAT_AC3,
  AE_SOURCE_FORMAT_EAC3,
  AE_SOURCE_FORMAT_DTS,
  AE_SOURCE_FORMAT_DTSHD_MA,
  AE_SOURCE_FORMAT_DTSHD_HRA,
  AE_SOURCE_FORMAT_TRUEHD,
  AE_SOURCE_FORMAT_MLP,
  AE_SOURCE_FORMAT_FLAC,

  AE_SOURCE_FORMAT_ADPCM,
  AE_SOURCE_FORMAT_DPCM,
  AE_SOURCE_FORMAT_PCM,
  AE_SOURCE_FORMAT_MP2,
  AE_SOURCE_FORMAT_MP3,
  AE_SOURCE_FORMAT_AAC,
  AE_SOURCE_FORMAT_VORBIS,
  AE_SOURCE_FORMAT_DVAUDIO,
  AE_SOURCE_FORMAT_WMAV1,
  AE_SOURCE_FORMAT_WMAV2,
  AE_SOURCE_FORMAT_MACE3,
  AE_SOURCE_FORMAT_MACE6,
  AE_SOURCE_FORMAT_VMDAUDIO,
  AE_SOURCE_FORMAT_MP3ADU,
  AE_SOURCE_FORMAT_MP3ON4,
  AE_SOURCE_FORMAT_SHORTEN,
  AE_SOURCE_FORMAT_ALAC,
  AE_SOURCE_FORMAT_WESTWOOD_SND1,
  AE_SOURCE_FORMAT_GSM, ///< as in Berlin toast format
  AE_SOURCE_FORMAT_QDM2,
  AE_SOURCE_FORMAT_COOK,
  AE_SOURCE_FORMAT_TRUESPEECH,
  AE_SOURCE_FORMAT_TTA,
  AE_SOURCE_FORMAT_SMACKAUDIO,
  AE_SOURCE_FORMAT_QCELP,
  AE_SOURCE_FORMAT_WAVPACK,
  AE_SOURCE_FORMAT_DSICINAUDIO,
  AE_SOURCE_FORMAT_IMC,
  AE_SOURCE_FORMAT_MUSEPACK7,
  AE_SOURCE_FORMAT_GSM_MS, ///< as found in WAV
  AE_SOURCE_FORMAT_ATRAC3,
  AE_SOURCE_FORMAT_VOXWARE,
  AE_SOURCE_FORMAT_APE,
  AE_SOURCE_FORMAT_NELLYMOSER,
  AE_SOURCE_FORMAT_MUSEPACK8,
  AE_SOURCE_FORMAT_SPEEX,
  AE_SOURCE_FORMAT_WMAVOICE,
  AE_SOURCE_FORMAT_WMAPRO,
  AE_SOURCE_FORMAT_WMALOSSLESS,
  AE_SOURCE_FORMAT_ATRAC3P,
  AE_SOURCE_FORMAT_SIPR,
  AE_SOURCE_FORMAT_MP1,
  AE_SOURCE_FORMAT_TWINVQ,
  AE_SOURCE_FORMAT_MP4ALS,
  AE_SOURCE_FORMAT_ATRAC1,
  AE_SOURCE_FORMAT_BINKAUDIO_RDFT,
  AE_SOURCE_FORMAT_BINKAUDIO_DCT,
  AE_SOURCE_FORMAT_AAC_LATM,
  AE_SOURCE_FORMAT_QDMC,
  AE_SOURCE_FORMAT_CELT,
  AE_SOURCE_FORMAT_G723_1,
  AE_SOURCE_FORMAT_G729,
  AE_SOURCE_FORMAT_8SVX_EXP,
  AE_SOURCE_FORMAT_8SVX_FIB,
  AE_SOURCE_FORMAT_BMV_AUDIO,
  AE_SOURCE_FORMAT_RALF,
  AE_SOURCE_FORMAT_IAC,
  AE_SOURCE_FORMAT_ILBC,
  AE_SOURCE_FORMAT_OPUS,
  AE_SOURCE_FORMAT_COMFORT_NOISE,
  AE_SOURCE_FORMAT_TAK,
  AE_SOURCE_FORMAT_METASOUND,
  AE_SOURCE_FORMAT_PAF_AUDIO,
  AE_SOURCE_FORMAT_ON2AVC,
  AE_SOURCE_FORMAT_DSS_SP,
  AE_SOURCE_FORMAT_FFWAVESYNTH,
  AE_SOURCE_FORMAT_SONIC,
  AE_SOURCE_FORMAT_SONIC_LS,
  AE_SOURCE_FORMAT_EVRC,
  AE_SOURCE_FORMAT_SMV,
  AE_SOURCE_FORMAT_DSD_LSBF,
  AE_SOURCE_FORMAT_DSD_MSBF,
  AE_SOURCE_FORMAT_DSD_LSBF_PLANAR,
  AE_SOURCE_FORMAT_DSD_MSBF_PLANAR,
  AE_SOURCE_FORMAT_4GV,
  AE_SOURCE_FORMAT_INTERPLAY_ACM,
  AE_SOURCE_FORMAT_XMA1,
  AE_SOURCE_FORMAT_XMA2,
  AE_SOURCE_FORMAT_DST,
  AE_SOURCE_FORMAT_ATRAC3AL,
  AE_SOURCE_FORMAT_ATRAC3PAL,

  AE_SOURCE_FORMAT_MAX
} AESourceFormat;

typedef enum
{
  AE_PROFILE_UNKNOWN = -1,

  AE_PROFILE_AAC_MAIN,
  AE_PROFILE_AAC_LOW,
  AE_PROFILE_AAC_SSR,
  AE_PROFILE_AAC_LTP,
  AE_PROFILE_AAC_HE,
  AE_PROFILE_AAC_HE_V2,
  AE_PROFILE_AAC_LD,
  AE_PROFILE_AAC_ELD,
  AE_PROFILE_MPEG2_AAC_LOW,
  AE_PROFILE_MPEG2_AAC_HE,

  AE_PROFILE_DTS,
  AE_PROFILE_DTS_ES,
  AE_PROFILE_DTS_96_24,
  AE_PROFILE_DTS_HD_HRA,
  AE_PROFILE_DTS_HD_MA,
  AE_PROFILE_DTS_EXPRESS,

  AE_PROFILE_MAX
} AEProfile;
